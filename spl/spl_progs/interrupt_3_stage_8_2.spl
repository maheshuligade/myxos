//Calculate the Physical address of the Stack Pointeralias Physical_SP S0;Physical_SP = (([PTBR + 2*(SP/512)]*512) + (SP%512));//Get arguments from the Stack//Get System Call Noprint "Interrupt=3";alias SysCallNo S1;SysCallNo = [Physical_SP - 1];print "SysCallNo";print SysCallNo;breakpoint;if (SysCallNo == 6) then    print "SEEK SysCall";    //Description:Changes the LSEEK position    //System Call No:6    //Interrupt No:3    //Arguments:1.fileDescriptor 2.newLSEEK    //Return Value: -1 (Failure) or 0 (Success)    alias newLSEEK S2;    newLSEEK = [Physical_SP - 3];    print "newLSEEK";    print newLSEEK;    alias fileDescriptor S3;    fileDescriptor = [Physical_SP - 4];    print "fileDescriptor";    print fileDescriptor;    //Step 1    //Check the fileDescriptor is valid or not    if ((0 > fileDescriptor)||(7 < fileDescriptor)) then        print "Invalid fileDescriptor";        [Physical_SP - 2] = -1;        ireturn;        endif;    //Step 2    //Index into the per process open file table in the PCB with the fileDescriptor        alias Current_PID S4;    Current_PID = (PTBR - 1024)/8;    alias PPFTStart S5;    PPFTStart = READY_LIST + 32*Current_PID + 15;    //Check the entry of the Pointer to System Wide Open File Table is valid or not    if ([PPFTStart + 2*fileDescriptor + 0]==-1) then        //Return from the System Call with -1        print "Invalid PtrToSWOFT";        [Physical_SP - 2]=-1;        ireturn;                endif;    //Step 3    alias PtrToSWOFT S6;    PtrToSWOFT = [PPFTStart + 2*fileDescriptor + 0];    //Step 4    //Using the Pointer to System Wide Open File Table     //index into the System Wide Open File Table and get FAT Index    alias FAT_Index S7;    FAT_Index = [FILE_TABLE + 2*PtrToSWOFT + 0];         //Step 5    //Fetch the file size of the file and store in the register    alias FILE_SIZE S8;    FILE_SIZE = [FAT + 8*FAT_Index + 1];    //Step 6    //Check LSEEK position is valid or not    if ((0 > newLSEEK)||(FILE_SIZE < newLSEEK)) then      print "Invalid LSEEK";      [Physical_SP - 2] = -1;      ireturn;          endif;    //Step 7    //Change the LSEEK to new LSEEK in the FILE_TABLE    print "LSEEK";    print [PPFTStart + 2*fileDescriptor + 1];    print "newLSEEK";    print newLSEEK;    [PPFTStart  + 2*fileDescriptor + 1] = newLSEEK;    //Step 8    //Return from System Call with 0 (Success)    [Physical_SP - 2] = 0;    ireturn;    endif;if (SysCallNo==7) then print "Read SysCallNo"; //Description:Reads a word from a file to the variable passed as argument //System Call No: 7 //Interrupt No: 3 //Arguments : 1.fileDescriptor 2.wordRead //Return Value: -1 (Failure) or 0 (Success) alias fileDescriptor S2; fileDescriptor = [Physical_SP - 4];    endif;print "Invalid SysCallNo";[Physical_SP - 2] = -1;ireturn;