//Exit System Call
//Description : Terminates the execution of the process which invoked it.
//				Exit removes this process from the Memory.There is only one process 
//				it halts the system.
//System Call No: 10
//Interrupt No: 9
//Arguments: None
//Return Value:-1 on failure,exits on success

alias Physical_SP S0;
Physical_SP=(([PTBR + 2*(SP/512)]*512) + (SP%512));
alias SysCallNo S1;
SysCallNo=[Physical_SP - 1];
//print SysCallNo;
if (SysCallNo==10) then
	//Step 1
	//If there is no process with ready state then halt the system
	alias PCB_index S2;
	PCB_index=0;
	alias NO_of_Ready_Pro S3;
	NO_of_Ready_Pro=0;
	while(PCB_index < 32) do
		if ([READY_LIST + 32*PCB_index + 1]==1) then
			NO_of_Ready_Pro=NO_of_Ready_Pro + 1;	
		endif;
		PCB_index=PCB_index + 1;
	endwhile;
	if (NO_of_Ready_Pro==0) then
		print "No Ready Process";
		halt;
	endif;

	//Step 2
	//Find the PCB of the current process
	alias Current_PID S4;
	Current_PID = (PTBR - 1024)/8;
	alias Current_PCB S5;
	Current_PCB = READY_LIST + 32*Current_PID;
	print [Current_PCB + 1];

	//Traverse through the READY_LIST of PCB to find the process with STATE as running
	PCB_index=0;
	while(PCB_index < 32) do
		if ([READY_LIST + 32*PCB_index + 1]==2) then
			break;	
		endif;
		PCB_index=PCB_index + 1;
	endwhile;

	//Close all open instances of the files by the process as done in the Close System Call
	alias PPFTIStart S6;
	PPFTIStart=READY_LIST + 32*Current_PID +15;

	alias fileDescriptor S7;
	fileDescriptor = 0;

	while(fileDescriptor < 8) do
		//Check SWOFT validity
		if ([PPFTIStart + 2*fileDescriptor + 0]==-1) then
			//print "Invalid SWOFTI";
			fileDescriptor = fileDescriptor + 1;
			continue;
		else
			//Index into the SWOFT
			alias SWOFTI S8;
			SWOFTI=[PPFTIStart + 2*fileDescriptor];
			//Check file is open or not stage 8
			if ([FILE_TABLE + 2*SWOFTI + 1]==0) then
				print "File already closed";
				fileDescriptor=fileDescriptor + 1;
				continue;
		endif;
		//File open validity is checked
			print "FileOpenCount";
			print  [FILE_TABLE +2*SWOFTI + 1];


			//Decrese the file open count
			[FILE_TABLE + 2*SWOFTI + 1]=[FILE_TABLE + 2*SWOFTI + 1] - 1;

			//Check the file open count is zero
			if ([FILE_TABLE + 2*SWOFTI + 1]==0) then

				//Set the entry of the FAT index in the SWOFT to invalid
				[FILE_TABLE + 2*SWOFTI + 0]=-1; 

				//Invalidate PPFT entry
				[PPFTIStart + 2*fileDescriptor + 0]=-1;
				[PPFTIStart + 2*fileDescriptor + 1]=-1;            
			endif;
		endif;
		fileDescriptor = fileDescriptor + 1;
	endwhile;
	
	//Set the  STATE in the PCB to 0. This indicates that the process has terminated. 
	[Current_PCB + 1]=0;	
	fileDescriptor=0;
	while(fileDescriptor < 8) do
		//The entries of the of the pages in the MEM_LIST must be decremented to 0,indicating unused.
		//This is done by checking the PPFT of the process.
		[MEM_LIST + [PPFTIStart + 2*fileDescriptor + 0]]=0;
		//Invalidate the all entries in the  PPFT of the process
		//To do this set the address field to -1 and the auxiliary information to 00
		//This indicates that the page table entry is not referenced and invalid

		[PPFTIStart + 2*fileDescriptor + 0]=-1;
		[PPFTIStart + 2*fileDescriptor + 1]="00";
		fileDescriptor = fileDescriptor + 1; 
	endwhile;
	//Find the next ready process from the READY_LIST of the PCBs
	PCB_index=0;
	while(PCB_index < 32) do
	
		print [READY_LIST + 32*PCB_index + 1];
		if ([READY_LIST + 32*PCB_index + 1]==1) then
			break;	
		endif;
		PCB_index=PCB_index + 1;
	endwhile;


	//Schedule this process for the execution by loading in the registers from the PCB

	alias newPCB S9;

	newPCB = READY_LIST +32*PCB_index;


	BP=[newPCB + 2];
	SP=[newPCB + 3];
	PTBR=[newPCB + 5];
	PTLR=[newPCB + 6];
	R0=[newPCB + 7];
	R1=[newPCB + 8];
	R2=[newPCB + 9];
	R3=[newPCB + 10];
	R4=[newPCB + 11];
	R5=[newPCB + 12];
	R6=[newPCB + 13];
	R7=[newPCB + 14];
	SP=SP + 1;

	//Get the IP from the PCB and store it on the  top of the stack
	alias newPhysical_SP S10;
	newPhysical_SP = (([PTBR + 2*(SP /512)] *512 )+(SP % 512));    //calculate the physical address of the SP
	[newPhysical_SP] = [newPCB + 4];							  //STORE IP field of the PCB on the  STACK


	//[newPCB + 1]=0; //set STATE to RUNNING;

	[newPCB + 1]=2; //set STATE to RUNNING;
	ireturn;
	
endif;
[Physical_SP - 2]=-1;
ireturn;