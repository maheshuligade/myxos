alias Physical_SP S0;
Physical_SP=([PTBR + 2*(SP/512)]*512) + (SP%512); //calculate the physical address of the stack pointer

alias SysCallNo S1;
SysCallNo=[Physical_SP - 1];
print "SysCallNo";
print SysCallNo;

breakpoint;

if (SysCallNo==2) then
  //Implementation of the open system call
  //Description:The open system call is used to open a file present in the disk
  //system call no: 2 
  //Interrupt No:2
  //Arguments:filename of the file to be opened
  //Return value:Index of open instance in per process Open File table -1 (Failure)
  //              or  index of open instance in per process 
  //              file open file table (Success)
 
  //take filename from the stack
  alias File_Name S2;
  File_Name=[Physical_SP - 3];
  print "File_Name";
  print File_Name;

  //Check the given  file is present in the  disk or not

  alias Current_File S3;
  Current_File=FAT;

  while(Current_File < (FAT + 512)) do
      	if ([Current_File + 0]==File_Name) then
      	  
      	  print "File Exists";
      	  break;

      	endif;
    
  	 Current_File=Current_File+8;
  endwhile;

  if (Current_File==512) then
      print "File Not Exists";
      [Physical_SP - 1]=-1;
      ireturn;	
  endif;
  
  //Store the fat index of the file in the register
  alias FAT_Index S4;
  FAT_Index=Current_File;

 //search the fat index is present in the system wide open file table
  alias SWOFT S5;
  SWOFT=FILE_TABLE;
  while(SWOFT<(FILE_TABLE + 128)) do
    if ([SWOFT + 0]==FAT_Index) then
        
        print "SWOFT FAT FOUND";
        [SWOFT + 1]=[SWOFT + 1] + 1;
       break;

    endif;
    SWOFT=SWOFT+2;
  endwhile;
  
  if (SWOFT==(FILE_TABLE + 128)) then
  	 print "SWOFT NOT FOUND";
     //No FAT index entry in the System Wide Open File Table
     SWOFT=FILE_TABLE;
     while(SWOFT<(FILE_TABLE + 128)) do
        if ([SWOFT + 0]==-1) then       
        
        print "Free SWOFT entry";
        break;
       
        endif;
        SWOFT=SWOFT+2;
     endwhile;
    if (SWOFT==(FILE_TABLE + 128)) then
        	
    	print "No free SWOFT";
    	[Physical_SP - 1]=-1;
    	ireturn;
    endif;
  	
  endif;
	alias SWOFT_FAT S6;
	SWOFT_FAT=SWOFT;
  
	alias Current_PID S7;
	Current_PID = (PTBR - 1024)/8;

	alias Current_PCB S8;
	Current_PCB = READY_LIST + 32*Current_PID;

	alias i S9;
	i=15;
	while(i < 31) do
 
 		if ([Current_PCB + i ]==-1) then
        	
  			print "Free PCB entry"; 
  			break;
 		endif;   
  
 		i=i+2;
	endwhile;

	if (i==31) then
    	
 	[Physical_SP - 1]=-1;
 	ireturn;
	else 
 	[Current_PCB + i + 0]=SWOFT_FAT; //Set pointer to System Wide open 
                                  //file table entry to System Wide 
                                  //Open File Table fat index 
 	[Current_PCB + i + 1]=0;        //sets LSEEK position to 0

	endif;
	SWOFT_FAT=FAT_Index;
	[SWOFT_FAT + 1]=[SWOFT_FAT + 1] + 1;

	[Physical_SP - 1]=FAT_Index;
	ireturn;
endif;
